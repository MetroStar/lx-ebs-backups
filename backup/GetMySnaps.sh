#!/bin/sh
#
# The purpose of this script is to find all backups associated 
# with my instance-ID with the intent of expiring any images that
# are older than the threshold date. The script will pull the the
# instance-ID from the instance meta-data URL, then search for
# Snapshots that were previously generated by the backup scripts
# found elsewhere in this tool-set.
#
# Dependencies:
# - Generic: See the top-level README_dependencies.md for script dependencies
#
# License:
# - This script released under the Apache 2.0 OSS License
#
######################################################################
WHEREAMI=`readlink -f ${0}`
SCRIPTDIR=`dirname ${WHEREAMI}`
TARGVG=${1:-UNDEF}
TZ=zulu

# Put the bulk of our variables into an external file so they
# can be easily re-used across scripts
source ${SCRIPTDIR}/commonVars.env

# Grab a filtered list candidate snapshots and dump to an array
# * Filter for "Created By" equals "Automated Backup"
# * Filter for "Description" contains "<INSTANCE_ID>-bkup"
function SnapListToArray() {
   local COUNT=0
   for SNAPLIST in `aws ec2 describe-snapshots --output=text --filter \
      "Name=description,Values=*_${THISINSTID}-bkup*" --filters \
      "Name=tag:Created By,Values=Automated Backup" --query \
      "Snapshots[].{F1_SnapID:SnapshotId,F2_Start:StartTime}" | tr '\t' ';'`
   do
      local SNAPIDEN=`echo ${SNAPLIST} | cut -d ";" -f 1`
      # Convert time - ditch unneeded tokens
      local SNAPTIME=`echo ${SNAPLIST} | cut -d ";" -f 2 | sed '{
         s/-//g
         s/://g
         s/[0-9][0-9]\.[0-9]*Z//
         s/T//
      }'`
      FIXLIST="${SNAPIDEN};${SNAPTIME}"
      SNAPARRAY[${COUNT}]="${FIXLIST}"
      local COUNT=$((${COUNT} +1))
   done
}

function CheckSnapAge(){
   # Date conversion template
   # $(date -d "${MYDATE:0:8} ${MYDATE:8:2}:${MYDATE:10:2}:00" "+%s")
   local COUNT=0
   while [ ${COUNT} -lt ${#SNAPARRAY[@]} ]
   do
      local SNAPID=`echo ${SNAPARRAY[${COUNT}]} | cut -d ";" -f 1`
      local SNAPDTJ=`echo ${SNAPARRAY[${COUNT}]} | cut -d ";" -f 2`
      local COUNT=$((${COUNT} +1))
      local SNAPDTE=$(date -d "${SNAPDTJ:0:8} ${SNAPDTJ:8:2}:${SNAPDTJ:10:2}:00" "+%s")
      if [ $((${CURCTIME} - ${SNAPDTE})) -gt ${EXPBEYOND} ]
      then
         printf "${SNAPID} is older than expiry-horizon. Deleteing..."
         aws ec2 delete-snapshot --snapshot-id ${SNAPID} && echo
      else
         echo "${SNAPID} is less than expiry-horizon (keeping)"
      fi
   done
}

SnapListToArray
CheckSnapAge
